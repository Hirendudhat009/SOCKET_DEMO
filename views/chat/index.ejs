<!DOCTYPE html>
<html>

<head>
    <meta charset='utf-8'>
    <meta http-equiv='X-UA-Compatible' content='IE=edge'>
    <title>iRoid</title>
    <meta name='viewport' content='width=device-width, initial-scale=1'>
    <link rel='stylesheet' type='text/css' media='screen' href='../chat.css'>
    <script src="https://code.jquery.com/jquery-1.11.3.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.5.1/socket.io.js"
        integrity="sha512-9mpsATI0KClwt+xVZfbcf2lJ8IFBAwsubJ6mI3rtULwyM3fBmQFzj0It4tGqxLOGQwGfJdk/G+fANnxfq9/cew=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>
</head>

<body>
    <div class="info">
        <h3>Info</h3>
        <h4>Sender: <span id="sender"></span></h4>
        <h4>Receiver:<span id="receiver"></span></h4>
    </div>
    <div class="chat">
        <div class="chat-title">
            <h2>Hiren patel </h2>
            <input type="hidden" id="sender_id" value="0">
            <input type="hidden" id="receiver_id" value="0">
            <input type="hidden" id="room_id" value="0">
            <span id="online_status" class="dot"></span>
            <span class="typing" id="type_name"></span>
            <figure class="avatar"><img
                    src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/764024/profile/profile-512.jpg" />
            </figure>
            <div>
            </div>

        </div>
        <div class="messages">
            <div class="messages-content" id="messageTest"></div>
        </div>
        <div id="textbox" class="action-box" display="block">
            <textarea class="action-box-input" type="text" id="message" value="message"
                placeholder="Type message..."></textarea>
            <button class="action-box-submit" id="send_message">
                <i class="fa fa-paper-plane"></i>
            </button>
        </div>
    </div>
</body>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
<script src='../js/font-awesome.js' crossorigin='anonymous'></script>
<script>

    $(document).ready(function () {

        var senderId = prompt("Enter Sender ID");
        var receiverId = prompt("Enter Receiver ID");
        var roomId = ''

        $('#sender_id').val(senderId)
        $('#sender').text(senderId)
        $('#receiver_id').val(receiverId)
        $('#receiver').text(receiverId)

        var ip = window.location.href;
        console.log(ip);
        socket = io.connect(ip, {
            transports: ['websocket'],
            reconnection: true, // whether to reconnect automatically
            reconnectionAttempts: Infinity, // number of reconnection attempts before giving up
            reconnectionDelay: 0, // how long to initially wait before attempting a new reconnection
            reconnectionDelayMax: 5000, // maximum amount of time to wait between reconnection attempts. Each attempt increases the 
            randomizationFactor: 0.5,
        });

        /*
        |----------------------------------------------------------------------------------------------------
        | SOCKET CONNECTION: 
        |     - STATUS UPDATE FOR ONLINE [UpdateStatusToOnline]
        |     - CREATE ROOM OR ALREADY EXIST WITH OPONENT USER THEN JOIN [createRoom]
        |----------------------------------------------------------------------------------------------------
        */
        socket.on('connect', function () {
            console.log('connected')
            socket.emit('UpdateStatusToOnline', { senderId, receiverId });
            socket.emit('createRoom', { senderId, receiverId });
        })


        /*
        |----------------------------------------------------------------------------------------------------
        | ROOM CONNECTED:
        |     - GET OPONENT ONLINE STATUS [getOnlineStatus]
        |     - READ OLD MESSAGES IF SOCKET CONNECTED OF OPONENT [ReadMessage]
        |----------------------------------------------------------------------------------------------------
        */
        socket.on('roomConnected', function (connectedRoomId) {
            let data = { roomId: connectedRoomId, senderId: receiverId, receiverId, chatId: 0 }
            console.log(`Room Connected:${connectedRoomId}`)
            roomId = connectedRoomId
            $('#room_id').val(roomId)
            socket.emit('getOnlineStatus', { roomId, senderId, receiverId });
            socket.emit('ReadMessage', data);
        })

        /*
        |----------------------------------------------------------------------------------------------------
        | SEND MESSAGE FUNCTION:
        |----------------------------------------------------------------------------------------------------
        */
        $("#send_message").click(function () {
            var message = $('#message').val()
            if (message.trim() != '') {
                sendMessage(message.trim())
            }
        });


        /*
        |----------------------------------------------------------------------------------------------------
        | NEW MESSAGE: Get new message from oponent
        |       - Read message [ReadMessage]
        |----------------------------------------------------------------------------------------------------
        */
        socket.on('newMessage', (data) => {
            console.log('new message', data);
            if (data.senderId == receiverId) {
                $(".messages-content").append("<div class='col-md-12 float-start' ><div class='float-start'><span class='receiver_message'>" + data.message + "</span></p></div>")
                $(".messages-content").animate({
                    scrollTop: $(".messages").height()
                }, "slow");
                socket.emit('ReadMessage', data);
            }
            // If User login with 2 device then that type of case to use this type condition 
            else if (data.senderId == senderId) {
                $(".messages-content").append(`
                    <div class="col-12 float-end">
                        <div class="float-end">
                            <span class="message">${data.message}<span>
                        </div>
                    </div>`
                );
            }
        });



        /*
        |----------------------------------------------------------------------------------------------------
        | SEEN MESSAGE: Set seen message of oponent
        |----------------------------------------------------------------------------------------------------
        */
        socket.on('seenMessage', (data) => {
            console.log('seen', data);
            if (data.senderId == senderId) {
                $("#seen").remove()
                $(".messages-content div").last().append(`<br><i id="seen" class='fas fa-check-double' style='padding-right: 8px;font-size:10px;color:#07d0e5f2; float: right;'></i>`);
                $(".messages-content").animate({
                    scrollTop: $(".messages").height()
                }, "slow");
            }
        });


        /*
        |----------------------------------------------------------------------------------------------------
        | ONLINE STATUS: Set Online status of oponent
        |----------------------------------------------------------------------------------------------------
        */
        socket.on('statusOnline', function (data) {
            console.log('check online status', data)
            if (data.senderId == receiverId) {
                if (data.isOnline) {
                    $('#online_status').css('background-color', '#4be74bfa')
                } else {
                    $('#online_status').css('background-color', 'red')
                }
            };
        })

        /*
        |----------------------------------------------------------------------------------------------------
        | TYPING: Sent Typing emit for oponent [typing]
        |----------------------------------------------------------------------------------------------------
        */
        $("textarea").keydown(function () {
            socket.emit('typing', { receiverId, roomId });
        });


        /*
        |----------------------------------------------------------------------------------------------------
        | DISPLAY TYPING: Set Typing of Oponent
        |----------------------------------------------------------------------------------------------------
        */
        socket.on('DisplayTyping', function (data) {
            console.log('Display typing:', data);
            $('#type_name').text(`...is typing`)
        })

        /*
        |----------------------------------------------------------------------------------------------------
        | REMOVE TYPING: Remove Typing of Oponent
        |----------------------------------------------------------------------------------------------------
        */
        $("textarea").keyup(function () {
            setTimeout(function () {
                socket.emit('removeTyping', { receiverId, roomId });
            }, 4000);
        })

        /*
        |----------------------------------------------------------------------------------------------------
        | REMOVE TYPING: Set or Remove Typing of Oponent
        |----------------------------------------------------------------------------------------------------
        */
        socket.on('removeTyping', function (data) {
            console.log('Remove typing:', data);
            $('#type_name').text(``)
        })

        /*
        |----------------------------------------------------------------------------------------------------
        | DISCONNECT: 
        |         - Socket disconnected [disconnected]
        |----------------------------------------------------------------------------------------------------
        */
        socket.on('disconnect', function () {
            console.log('A user disconnected');
            socket.emit('disconnected', { senderId, receiverId, roomId })
        });

    });

    // Press enter key on sent a message
    $('#message').keypress(function (event) {
        var keycode = (event.keyCode ? event.keyCode : event.which);
        let message = $(this).val()
        if (keycode == '13') {
            if (message.trim() != '') {
                console.log("message sent:", message)
                sendMessage(message.trim())
            }
        }
    });


    /*
    |----------------------------------------------------------------------------------------------------
    | SEND MESSAGE 
    |----------------------------------------------------------------------------------------------------
    */
    function sendMessage(message) {
        const senderId = $('#sender_id').val()
        const receiverId = $('#receiver_id').val()
        const roomId = $('#room_id').val()

        $(".messages-content").append(`
             <div class="col-12 float-end">
                <div class="float-end">
                    <span class="message">${message}<span>
                </div>
            </div>`
        );
        $('#messageTest').scrollTop($('#messageTest')[0].scrollHeight);
        socket.emit('sendMessage', { message, type: 0, senderId, receiverId, roomId });
        $('#message').val('')
    }
</script>

</html>